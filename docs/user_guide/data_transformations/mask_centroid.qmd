---
title: "Calculate Mask Centroid"
format: html
---

## Overview

This transform calculates the centroid (geometric center) for each mask in a dataset.

### Detailed Description

This transformation processes mask data, which represents regions of interest, and for each individual mask at each point in time, it computes the center of mass. The output is a series of points, where each point represents the calculated centroid of a corresponding mask. This is a common operation for summarizing a spatial distribution of pixels with a single representative point.

The calculation is purely geometric; it finds the average of the x and y coordinates of all the points within the mask. This means that for some non-convex (hollow or U-shaped) masks, the centroid can fall outside the mask itself, as shown in the examples below.

### Neuroscience Use Cases

- **Tracking Cell Bodies:** If a mask outlines a neuron's soma, its centroid provides a consistent point for tracking the cell's position over time, even if the cell's shape changes slightly.
- **Analyzing Animal Behavior:** When tracking an animal in a video, a mask might be generated around the animal's body. The centroid of this mask can serve as a simplified representation of the animal's location for trajectory analysis.
- **Quantifying Limb Position:** For masks drawn around an animal's limbs, the centroid can be used to approximate the position of the limb for kinematic studies.

::: {.content-hidden when-format="html"}
```{{python}}
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon

# Use xkcd style for the plot
with plt.xkcd():
    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18, 6))
    fig.suptitle('How the Mask Centroid is Calculated for Different Shapes', fontsize=20)

    # --- Shape 1: Simple Square (Centroid Inside) ---
    square_points = np.array([[1, 1], [1, 4], [4, 4], [4, 1]])
    square_centroid = np.mean(square_points, axis=0)

    ax1.add_patch(Polygon(square_points, closed=True, alpha=0.3, color='green'))
    ax1.plot(np.append(square_points[:, 0], square_points[0, 0]), np.append(square_points[:, 1], square_points[0, 1]), 'g-')
    ax1.plot(square_centroid[0], square_centroid[1], 'ro', markersize=10, label='Centroid')
    ax1.set_title('Simple Shape (Square)')
    ax1.set_xlabel('X')
    ax1.set_ylabel('Y')
    ax1.legend()
    ax1.grid(True)
    ax1.set_aspect('equal', adjustable='box')
    ax1.set_xlim(0, 5)
    ax1.set_ylim(0, 5)

    # --- Shape 2: Oblong Rectangle (Centroid Inside) ---
    rect_points = np.array([[1, 1], [1, 3], [6, 3], [6, 1]])
    rect_centroid = np.mean(rect_points, axis=0)

    ax2.add_patch(Polygon(rect_points, closed=True, alpha=0.3, color='orange'))
    ax2.plot(np.append(rect_points[:, 0], rect_points[0, 0]), np.append(rect_points[:, 1], rect_points[0, 1]), 'y-')
    ax2.plot(rect_centroid[0], rect_centroid[1], 'ro', markersize=10, label='Centroid')
    ax2.set_title('Oblong Shape (Rectangle)')
    ax2.set_xlabel('X')
    ax2.set_ylabel('Y')
    ax2.legend()
    ax2.grid(True)
    ax2.set_aspect('equal', adjustable='box')
    ax2.set_xlim(0, 7)
    ax2.set_ylim(0, 4)

    # --- Shape 3: Complex U-Shape (Centroid Outside) ---
    u_shape_points = np.array([[1, 1], [1, 5], [2, 5], [2, 2], [4, 2], [4, 5], [5, 5], [5, 1]])
    u_shape_centroid = np.mean(u_shape_points, axis=0)

    ax3.add_patch(Polygon(u_shape_points, closed=True, alpha=0.3, color='blue'))
    ax3.plot(np.append(u_shape_points[:, 0], u_shape_points[0, 0]), np.append(u_shape_points[:, 1], u_shape_points[0, 1]), 'b-')
    ax3.plot(u_shape_centroid[0], u_shape_centroid[1], 'ro', markersize=10, label='Centroid')
    ax3.set_title('Complex Shape (U-Shape)')
    ax3.set_xlabel('X')
    ax3.set_ylabel('Y')
    ax3.legend()
    ax3.grid(True)
    ax3.set_aspect('equal', adjustable='box')
    ax3.set_xlim(0, 6)
    ax3.set_ylim(0, 6)

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()
```
:::

## Parameters

This transform does not have any configurable parameters. It calculates the standard geometric centroid for each mask.

## Example Configuration

Here is a complete example of a JSON configuration file that could be used to run this transformation.

```json
[
{
    "transformations": {
        "metadata": {
            "name": "Mask Centroid Pipeline",
            "description": "Test mask centroid calculation on mask data",
            "version": "1.0"
        },
        "steps": [
            {
                "step_id": "1",
                "transform_name": "Calculate Mask Centroid",
                "phase": "analysis",
                "input_key": "test_masks",
                "output_key": "mask_centroids",
                "parameters": {}
            }
        ]
    }
}
]
```

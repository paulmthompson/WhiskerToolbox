{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Analog Hilbert Phase\"\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Overview\n",
        "\n",
        "This transform calculates the instantaneous phase of an analog signal, which is useful for analyzing oscillations.\n",
        "\n",
        "### Detailed Description\n",
        "\n",
        "The Hilbert transform is a mathematical operation that shifts the phase of all positive frequency components of a signal by -90 degrees and all negative frequency components by +90 degrees. When this phase-shifted signal (the imaginary part) is combined with the original signal (the real part), it forms a complex-valued \"analytic signal\".\n",
        "\n",
        "The instantaneous phase is the angle of this complex number at each point in time. It provides a way to represent an oscillating signal in terms of its phase, which progresses from -π to +π for each cycle of the oscillation. This transform uses an efficient FFT-based method to compute the Hilbert transform.\\\n",
        "\\\n",
        "![](images/clipboard-1556985646.png)\n",
        "\n",
        "````         \n",
        "#| code-fold: true\n",
        "#| fig-cap: \"Illustration of the Hilbert Phase Transform\""
      ],
      "id": "e474d0f6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.signal import hilbert\n",
        "\n",
        "# Use xkcd style\n",
        "with plt.xkcd():\n",
        "    # Generate a sine wave\n",
        "    fs = 100  # Sampling frequency\n",
        "    t = np.arange(0, 2, 1/fs)  # Time vector\n",
        "    frequency = 2  # Hz\n",
        "    signal = np.sin(2 * np.pi * frequency * t)\n",
        "\n",
        "    # Calculate the analytic signal and phase\n",
        "    analytic_signal = hilbert(signal)\n",
        "    instantaneous_phase = np.angle(analytic_signal) # np.unwrap is not needed for this illustration\n",
        "\n",
        "    # Create the plot\n",
        "    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6), sharex=True)\n",
        "    fig.suptitle('What the Hilbert Phase Transform Does', fontsize=16)\n",
        "\n",
        "    # Plot the original signal and analytic signal\n",
        "    ax1.plot(t, signal, label='Original Signal')\n",
        "    ax1.plot(t, analytic_signal.imag, label='Hilbert Transform')\n",
        "    ax1.set_title('A Signal and its 90-degree Phase Shift')\n",
        "    ax1.set_ylabel('Amplitude')\n",
        "    ax1.legend()\n",
        "    ax1.grid(True)\n",
        "\n",
        "    # Plot the instantaneous phase\n",
        "    ax2.plot(t, instantaneous_phase, 'r')\n",
        "    ax2.set_title('The Calculated Instantaneous Phase')\n",
        "    ax2.set_xlabel('Time (s)')\n",
        "    ax2.set_ylabel('Phase (radians)')\n",
        "    ax2.grid(True)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "id": "9fc1d81e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "````\n",
        "\n",
        "### Neuroscience Use Cases\n",
        "\n",
        "In neuroscience, analyzing the phase of neural signals is crucial for understanding brain function. Some common applications include:\n",
        "\n",
        "-   **Rhythmic Behaviors:** The phase of signals from sensors tracking rhythmic behaviors like whisking, sniffing, or licking can be extracted to correlate them with neural activity.\n",
        "\n",
        "## Parameters\n",
        "\n",
        "This transform has the following parameters:\n",
        "\n",
        "-   `low_frequency`: The low-cut frequency for the bandpass filter, in Hertz. This determines the lower end of the frequency range you want to analyze.\n",
        "-   `high_frequency`: The high-cut frequency for the bandpass filter, in Hertz. This determines the upper end of the frequency range you want to analyze.\n",
        "-   `discontinuity_threshold`: A time gap, in samples, above which the signal is considered to have a break. The transform will process the continuous segments separately. This is useful for data with missing samples or interruptions.\n",
        "\n",
        "## Example Configuration\n",
        "\n",
        "Here is a complete example of a JSON configuration file that loads data and applies the Analog Hilbert Phase transform.\n",
        "\n",
        "``` json\n",
        "[\n",
        "{\n",
        "    \"transformations\": {\n",
        "        \"metadata\": {\n",
        "            \"name\": \"Hilbert Phase Pipeline\",\n",
        "            \"description\": \"Test Hilbert phase calculation on analog signal\",\n",
        "            \"version\": \"1.0\"\n",
        "        },\n",
        "        \"steps\": [\n",
        "            {\n",
        "                \"step_id\": \"1\",\n",
        "                \"transform_name\": \"Hilbert Phase\",\n",
        "                \"phase\": \"analysis\",\n",
        "                \"input_key\": \"test_signal\",\n",
        "                \"output_key\": \"phase_signal\",\n",
        "                \"parameters\": {\n",
        "                    \"low_frequency\": 5.0,\n",
        "                    \"high_frequency\": 15.0,\n",
        "                    \"discontinuity_threshold\": 1000\n",
        "                }\n",
        "            }\n",
        "        ]\n",
        "    }\n",
        "}\n",
        "]\n",
        "```\n",
        "\n",
        "### References\n",
        "\n",
        "Hill, D.N., Curtis, J.C., Moore, J.D., Kleinfeld, D., 2011. Primary motor cortex reports efferent control of vibrissa motion on multiple timescales. Neuron 72, 344–356. <https://doi.org/10.1016/j.neuron.2011.09.020>"
      ],
      "id": "05aba34f"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
---
title: "Calculate Line to Point Distance"
format: html
---

## Overview

This transform calculates the minimum distance from a set of points to a line for each moment in time, which is useful for quantifying the spatial relationship between different tracked objects.

### Detailed Description

This operation computes the shortest Euclidean distance between a line (composed of connected segments) and one or more points at each corresponding timestamp. If multiple points are present at a single timestamp, the transform identifies the minimum distance among all points to the line. The calculation finds the closest point on any segment of the line to each of the provided points and returns the smallest distance found.

If the line and points are associated with different spatial scales (i.e., different image sizes), the points will be automatically scaled to the line's coordinate system before the distance is computed. The output is an analog time series where the value at each time point is the calculated minimum distance.

![](images/clipboard-3209141553.png)

::: {.content-hidden when-format="html"}
```{{python}}
#| echo: false
import numpy as np
import matplotlib.pyplot as plt

# Use xkcd style for the plot
with plt.xkcd():
    # --- Generate sample data ---
    # A curved line representing a tracked path or object
    line_x = np.linspace(0, 10, 100)
    line_y = 2 * np.sin(line_x / 2) + 3

    # A set of points, some close, some far
    points_x = [1, 3, 5, 8, 9]
    points_y = [6, 1, 3, 7, 2]

    # --- Find the minimum distance ---
    min_dist_sq = float('inf')
    closest_point_on_line = None
    closest_point_in_set = None

    for px, py in zip(points_x, points_y):
        # For each point, find the closest point on the line
        distances_sq = (line_x - px)**2 + (line_y - py)**2
        min_idx = np.argmin(distances_sq)

        if distances_sq[min_idx] < min_dist_sq:
            min_dist_sq = distances_sq[min_idx]
            closest_point_on_line = (line_x[min_idx], line_y[min_idx])
            closest_point_in_set = (px, py)

    min_distance = np.sqrt(min_dist_sq)

    # --- Create the plot ---
    fig, ax = plt.subplots(figsize=(10, 6))
    fig.suptitle('Calculating Minimum Distance from Points to a Line', fontsize=16)

    # Plot the line
    ax.plot(line_x, line_y, label='Tracked Line (e.g., a whisker or limb)')

    # Plot the points
    ax.plot(points_x, points_y, 'o', color='red', markersize=8, label='Set of Points (e.g., objects of interest)')

    # Highlight the closest pair and the distance line
    if closest_point_on_line and closest_point_in_set:
        p_line = closest_point_on_line
        p_set = closest_point_in_set
        ax.plot([p_line[0], p_set[0]], [p_line[1], p_set[1]], 'g--',
                label=f'Minimum Distance = {min_distance:.2f}')
        ax.plot(p_line[0], p_line[1], 'go', markersize=10)
        ax.plot(p_set[0], p_set[1], 'go', markersize=10, label='Closest Pair')

    ax.set_title('The transform finds the shortest distance between any point and the line')
    ax.set_xlabel('X Coordinate')
    ax.set_ylabel('Y Coordinate')
    ax.legend()
    ax.grid(True)
    ax.set_aspect('equal', adjustable='box')

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()
```
:::

### Neuroscience Use Cases

This transformation is valuable for analyzing the interaction between different elements in behavioral or physiological experiments:

-   **Whisker Tracking:** In studies of rodent behavior, one might track the position of a whisker (as a line) and the location of an object (as a point). This transform can precisely measure the distance from the whisker to the object at each frame of a video, helping to identify moments of contact or near-contact.
-   **Limb and Body Coordination:** When tracking the movement of an animal's limb (represented as a line) relative to a target or another body part (represented as a point), this transform can quantify their spatial relationship over time. This is useful for studies of motor control and coordination.
-   **Neural Prosthetics and Brain-Computer Interfaces:** In experiments where an animal controls a cursor or robotic arm, this transform could be used to measure the distance from the effector (the line) to a target (the point), providing a continuous measure of performance.

## Parameters

This transform has the following parameter:

-   `point_data`: The key of the PointData object in the DataManager. This object contains the set of points from which the minimum distance to the line will be calculated at each timestamp.

## Example Configuration

Here is a complete example of a JSON configuration file that could be used to run this transformation. This example calculates the distance between a line stored with the key `test_line` and a set of points stored with the key `test_points`.

``` json
[
{
    "transformations": {
        "metadata": {
            "name": "Line to Point Distance Pipeline",
            "description": "Test line to point minimum distance calculation",
            "version": "1.0"
        },
        "steps": [
            {
                "step_id": "1",
                "transform_name": "Calculate Line to Point Distance",
                "phase": "analysis",
                "input_key": "test_line",
                "output_key": "line_point_distances",
                "parameters": {
                    "point_data": "test_points"
                }
            }
        ]
    }
}
]
```
